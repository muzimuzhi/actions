# https://docs.github.com/en/actions/reference/metadata-syntax-for-github-actions

name: Setup pre-commit

description: Install pre-commit via uv, init it and setup caching

inputs:
  uv-version:
    description: "Version of `uv` to install"
    default: 'latest'
    required: false
  uv-enable-cache:
    description: "Enable `uv` caching"
    default: 'true'
    required: false
  pre-commit-version:
    description: "Version of `pre-commit` to install"
    default: 'latest'
    required: false
  pre-commit-config-path:
    description: "Path to the pre-commit config file"
    default: '.pre-commit-config.yaml'
    required: false
  pre-commit-if-run:
    description: "Run pre-commit hooks after setup?"
    default: 'false'
    required: false
  pre-commit-run-args:
    description: "Arguments to pass to `pre-commit run`"
    default: '--all-files --show-diff-on-failure --color=always'
    required: false

runs:
  using: "composite"

  steps:
    - name: Setup uv
      uses: astral-sh/setup-uv@v6
      with:
        version: ${{ inputs.uv-version }}
        enable-cache: ${{ inputs.uv-enable-cache }}

    - name: Install pre-commit
      shell: bash
      run: |
        uv tool install pre-commit@${{ inputs.pre-commit-version }}

    # https://pre-commit.com/#github-actions-example
    - name: Prepare a non-existent filename
      id: generate_filename
      shell: bash
      run: |
        while true; do
          filename="_tmp_$RANDOM"
          if [ -f "$filename" ]; then
            continue
          fi
          echo "filename=$filename" >> $GITHUB_OUTPUT
          break
        done

    - name: Generate cache hash
      shell: bash
      run: |
        tmp_file="${{ steps.generate_filename.outputs.filename }}"
        echo "$(python -VV)" > "$tmp_file"
        echo "PRE_COMMIT_CACHE_HASH=${{ hashFiles(inputs.pre-commit-config-path, steps.generate_filename.outputs.filename) }}" >> $GITHUB_ENV
        rm "$tmp_file"

    # https://github.com/pre-commit/action/blob/main/action.yml
    - name: Restore pre-commit cache
      uses: actions/cache@v4
      with:
        # https://pre-commit.com/#managing-ci-caches
        path: ${{ env.PRE_COMMIT_HOME || (env.XDG_CACHE_HOME && format('{0}/pre-commit', env.XDG_CACHE_HOME) || '~/.cache/pre-commit') }}
        key: pre-commit-${{ runner.os }}-${{ env.PRE_COMMIT_CACHE_HASH }}
        restore-keys: |
          pre-commit-${{ runner.os }}-${{ env.PRE_COMMIT_CACHE_HASH }}
          pre-commit-${{ runner.os }}

    - name: Install pre-commit hooks
      shell: bash
      run: |
        pre-commit install \
          --config ${{ inputs.pre-commit-config-path }} \
          --install-hooks

    - name: Clean unused pre-commit hooks
      shell: bash
      run: |
        pre-commit gc \
          --config ${{ inputs.pre-commit-config-path }}

    - name: Run pre-commit hooks
      if: ${{ fromJSON(inputs.pre-commit-if-run) }}
      shell: bash
      run: |
        pre-commit run \
          --config ${{ inputs.pre-commit-config-path }} \
          ${{ inputs.pre-commit-run-args }}
